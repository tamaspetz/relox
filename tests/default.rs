#[cfg(all(feature = "compress", feature = "decompress"))]
#[test]
fn test_compress_decompress() {
    use relox::{elf32_relocate, Elf32Relocs};

    const REL1: [u8; 192] = [
        0x00, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x10, 0x08, 0x00, 0x40, 0x02, 0x29, 0x00,
        0x00, 0x18, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x20, 0x08, 0x00, 0x40, 0x02, 0x65,
        0x00, 0x00, 0x28, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x38, 0x08, 0x00, 0x40, 0x02,
        0x65, 0x00, 0x00, 0x40, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x48, 0x08, 0x00, 0x40,
        0x02, 0x65, 0x00, 0x00, 0x58, 0x08, 0x00, 0x40, 0x02, 0x30, 0x00, 0x00, 0x60, 0x08, 0x00,
        0x40, 0x02, 0x65, 0x00, 0x00, 0x68, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x78, 0x08,
        0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x88, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x98,
        0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0xa8, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00,
        0xb8, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0xc8, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00,
        0x00, 0xd0, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0xd8, 0x08, 0x00, 0x40, 0x02, 0x65,
        0x00, 0x00, 0xe0, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0xe8, 0x08, 0x00, 0x40, 0x02,
        0x65, 0x00, 0x00, 0xf8, 0x08, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00, 0x08, 0x09, 0x00, 0x40,
        0x02, 0x65, 0x00, 0x00, 0x18, 0x09, 0x00, 0x40, 0x02, 0x65, 0x00, 0x00,
    ];

    const ADDR1: [u32; 24] = [
        0x40000800, 0x40000810, 0x40000818, 0x40000820, 0x40000828, 0x40000838, 0x40000840,
        0x40000848, 0x40000858, 0x40000860, 0x40000868, 0x40000878, 0x40000888, 0x40000898,
        0x400008a8, 0x400008b8, 0x400008c8, 0x400008d0, 0x400008d8, 0x400008e0, 0x400008e8,
        0x400008f8, 0x40000908, 0x40000918,
    ];

    let mut compressed: [u8; 32] = [0; 32];
    let mut el32relocs = Elf32Relocs::new(&REL1);
    let written = el32relocs.compress(&mut compressed).unwrap();
    assert_eq!(written, 5 + (1 + 1 + 24));

    let mut index = 0;
    elf32_relocate(&compressed, &mut |relocation_type, address| {
        assert_eq!(relocation_type, 0x02);
        assert_eq!(address, ADDR1[index]);
        index += 1;
        Ok(())
    })
    .unwrap();
}
